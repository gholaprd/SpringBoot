MICROSERVICES
==============
It it architechrul way to design our appl uniquely with small modules developed individually ,packaged indvidually and 
deployed ondividually ,in individiually process


Why Microservice
previously developing and deploying app eficien way in monolithic approach
developing individually but packaging dependently as single 	war

Whats are the drawbacks in monolithic aproach

Performance issue due to huge data (means in terms of War)
CICD not posssible (if there is bug in services then repackage all services)
Adopting new technology is not possible
Exception propogation not proper(If one services failed then all ur appl down)
code redeability not there.

What Is Spring Cloud?
Probably, the first microservices interview question that you may encounter. Spring Cloud in Microservices, 
is a system that provides integration with external systems.
features mentioned-below:
Discovery of service registration
Service to service calls
Routing
Circuit breakers and load balancing

Best design of MS
- Seprate build for each MS
- Seprate data store for each MS
- Deploy into containers

DDD(Domain driven Design)
Focus on Core domain logic
find the complex on modelof the domain 
constanly collabarate with  domain experts

Need of DDD
Maintaability
testablity
reduced compexity

Spring Cloud
spring Cloud in Microservices, is a system that provides integration with external systems.
features
Services discovery
service to service call
ckt breaker and load balancing
routing

Can you give a gist about Rest and Microservices?
REST
Though you can implement microservices in multiple ways, REST over HTTP is a way to implement Microservices. 
REST is also used in other applications such as web apps, API design, and MVC applications to serve business data.

Microservices
Microservices is an architecture wherein all the components of the system are put into individual components, 
which can be built, deployed, and scaled individually. There are certain principles and best practices of
 Microservices that help in building a resilient application

What is Bounded Context?
Bounded Context is a central pattern in Domain-Driven Design.

What are the challenges faced while using Microservices?

Microservices always rely on each other. Therefore, they need to communicate with each other.
DevOps is a must, because of the explosion of a number of processes in a production system. 
How to deploy multiple versions of single microservice and route calls appropriately?
How to aggregate logs/metrics across the services? 

Achieve zero down time during deployment?
One way of achieving this is blue/green deployment. In this approach, two versions of a single microservice are
 deployed at a time. But only one version is taking real requests. Once the newer version is tested to the required 
 satisfaction level, you can switch from older version to newer version.

You can run a smoke-test suite to verify that the functionality is running correctly in the newly deployed version
Blue-green deployment is a technique that reduces downtime and risk by running two identical production environments 
called Blue and Green. At any time, only one of the environments is live, with the live environment serving all 
production traffic. For this example, Blue is currently live and Green is idle.

As you prepare a new version of your software, deployment and the final stage of testing takes place in the 
environment that is not live: in this example, Green. Once you have deployed and fully tested the software in Green, 
you switch the router so all incoming requests now go to Green instead of Blue. Green is now live, and Blue is idle.

This technique can eliminate downtime due to application deployment. In addition, blue-green deployment reduces 
risk: if something unexpected happens with your new version on Green, you can immediately roll back to the last 
version by switching back to Blue.


Scaling up microservices??
One can scale the system by increasing the number of instances of service by bringing up more containers.
One can also shut down some containers when the requirement is less. That is, scale down.

12Factor app

Codebase
One codebase, multiple deploys. This means that we should only have one codebase for different versions of a 
microservices. Branches are ok, but different repositories are not.
Dependencies
Explicitly declare and isolate dependencie
Config
Store config in the environment. 
Backing services 
instead of hard coding url for another service in your RestTemplate, use Ribbon (with or without Eureka) to define the url: 
Release & Run 
Strictly separate build and run stages.
Processes 
Execute the app as one or more stateless processes.
Port Binding 
Export services via port binding. 
Concurrency 
Scale-out via the process model. 
Disposability 
The twelve-factor app’s processes are disposable, meaning they can be started or stopped at a moment’s notice.
Dev/Prod parity 
Keep development, staging, and production as similar as possible
Logs 
Treat logs as event streams, sending all logs only to stdout.
Admin processes 
Run admin/management tasks as one-off processes. 



End to End testing validates all the processes in the workflow to check if everything is working properly as expected

Why Would You Opt For Microservices Architecture?
Microservices can adapt easily to other frameworks or technologies.
Failure of a single process does not affect the entire system.
Provides support to big enterprises as well as small teams.
Can be deployed independently and in relatively less time.

Eureka knows as Netflix service discovery
Netflix provided internally uses of cloud

Register the services in Eureka server
cleint will not directly communicate with services it should like through  eureka server bcz the url should hardcoded 

Microservices are often integrated using a simple protocol like REST over HTTP. Other communication protocols can also be used for integration like AMQP,
 JMS, Kafka, etc.

The communication protocol can be broadly divided into two categories- synchronous communication and asynchronous communication.

Synchronous Communication
RestTemplate, WebClient, FeignClient can be used for synchronous communication between two microservices. Ideally, we should minimize the number of 
synchronous calls between microservices because networks are brittle and they introduce latency. Ribbon - a client-side load balancer can be used for
better utilization of resource on the top of RestTemplate. Hystrix circuit breaker can be used to handle partial failures gracefully without a 
cascading effect on the entire ecosystem. Distributed commits should be avoided at any cost, instead, we shall opt for eventual consistency using 
asynchronous communication.

Asynchronous Communication
In this type of communication, the client does not wait for a response, instead, it just sends the message to the message broker. 
AMQP (like RabbitMQ) or Kafka can be used for asynchronous communication across microservices to achieve eventual consistency.

You must use asynchronous communication while handling HTTP POST/PUT (anything that modifies the data) requests, using some reliable queue mechanism 
(RabbitMQ, AMQP, etc.) 
It's fine to use synchronous communication for Aggregation pattern at API Gateway Level. But this aggregation should not include any business logic other 
than aggregation. Data values must not be transformed at Aggregator, otherwise, it defeats the purpose of Bounded Context. In Asynchronous communication,
 events should be published into a Queue. Events contain data about the domain, it should not tell what to do (action) on this data. 
If microservice to microservice communication still requires synchronous communication for GET operation, then seriously reconsider the partitioning of 
your microservices for bounded context, and create some tasks in backlog/technical debt


There are certain advantages.

1.URLs are not hardcoded.

2.you don't have to write unit test cases for feign as there is no code to test however you have to write integration tests.

3.we can use Eureka Client ID instead of the URL.

4.Feign handled the actual code.

5.Feign integrates with Ribbon and Eureka Automatically.
What are the challenges you face while working Microservice Architectures?
Configuration Management: Maintaining the configurations for the components across the various environments becomes 
tough sometimes.
Debugging: Difficult to find out each and every service for an error. It is essential to maintain centralized 
logging and dashboards to debug problems.